'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.default = function (config, data) {
  (0, _assert2.default)(config, 'Config is required');
  (0, _assert2.default)((typeof config === 'undefined' ? 'undefined' : _typeof(config)) === 'object' && !Array.isArray(config), 'Config should be an object');
  (0, _assert2.default)(config.key, '`key` is required in config');
  (0, _assert2.default)(config.datacenter, '`datacenter` is required in config');

  (0, _assert2.default)(data, 'data is required');
  (0, _assert2.default)((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === 'object' && !Array.isArray(data), 'data should be an object');
  (0, _assert2.default)(data.templateId, '`templateId` is required in data object');
  (0, _assert2.default)(typeof data.templateId === 'number', '`templateId` should be a number');
  (0, _assert2.default)(data.templateData, '`templateData` is required');
  (0, _assert2.default)(_typeof(data.templateData) === 'object' && !Array.isArray(data.templateData), '`templateData` should be an object');
  (0, _assert2.default)(data.templateData.name, 'A template name inside `templateData` is required');
  (0, _assert2.default)(data.templateData.html, 'An HTML string inside `templateData` is required');
  (0, _assert2.default)(typeof data.templateData.html === 'string', 'An HTML string inside `templateData` is required');
  (0, _assert2.default)(data.campaign, 'Campaign is required');
  (0, _assert2.default)(_typeof(data.campaign) === 'object' && !Array.isArray(data.campaign), '`campaign` should be an object');

  var mailchimp = new _mailchimpLite2.default({
    key: config.key,
    datacenter: config.datacenter
  });

  function updateTemplate(_ref) {
    var id = _ref.id,
        data = _ref.data;

    return mailchimp.patch('/templates/' + id, data);
  }

  function createCampaign(data) {
    return mailchimp.post('/campaigns', data);
  }

  function updateCampaignContent(_ref2) {
    var id = _ref2.id,
        data = _ref2.data;

    return mailchimp.put('/campaigns/' + id + '/content', data);
  }

  function sendCampaignAction(_ref3) {
    var id = _ref3.id,
        action = _ref3.action;

    return mailchimp.post('/campaigns/' + id + '/actions/' + action);
  }

  function init() {
    return new Promise(function (resolve, reject) {
      return updateTemplate({ id: data.templateId, data: data.templateData }).then(function () {
        return createCampaign(data.campaign);
      }).then(function (response) {
        var id = response.id;

        var dataObj = {
          template: {
            id: data.templateId
          }
        };

        return updateCampaignContent({ id: id, data: dataObj }).then(function () {
          return id;
        });
      }).then(function (id) {
        return sendCampaignAction({ id: id, action: 'send' });
      }).then(function (response) {
        return resolve({ message: 'Campaign sent' });
      }).catch(function (error) {
        return reject(error);
      });
    });
  }

  return {
    init: init,
    updateTemplate: updateTemplate,
    createCampaign: createCampaign,
    updateCampaignContent: updateCampaignContent,
    sendCampaignAction: sendCampaignAction
  };
};

var _mailchimpLite = require('mailchimp-lite');

var _mailchimpLite2 = _interopRequireDefault(_mailchimpLite);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }