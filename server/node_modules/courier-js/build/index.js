'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _fs = require('fs');

var _html = require('html');

var _mailchimpify = require('mailchimpify');

var _mailchimpify2 = _interopRequireDefault(_mailchimpify);

var _assert = require('assert');

var _assert2 = _interopRequireDefault(_assert);

var _reactHtmlEmail = require('react-html-email');

var _mailchimp = require('./integrations/mailchimp');

var _mailchimp2 = _interopRequireDefault(_mailchimp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _reactHtmlEmail.injectReactEmailAttributes)();

function assertTemplateParams(templateName, props) {
  (0, _assert2.default)(templateName, '`templateName` should be passed in to `render`.');
  (0, _assert2.default)(typeof templateName === 'string', '`templateName` should be a string');
  (0, _assert2.default)((typeof props === 'undefined' ? 'undefined' : _typeof(props)) === 'object' && !Array.isArray(props), '`props` should be an object');
}

var renderHtml = function renderHtml(template) {
  return (0, _html.prettyPrint)((0, _mailchimpify2.default)((0, _reactHtmlEmail.renderEmail)(template)), { indent_size: 2 });
};

exports.default = function (opts) {
  (0, _assert2.default)(opts, 'Requires an `opts` object');
  (0, _assert2.default)((typeof opts === 'undefined' ? 'undefined' : _typeof(opts)) === 'object', '`opts` should be an object');
  (0, _assert2.default)(opts.allTemplates, 'Requires an `allTemplates` object in opts');
  (0, _assert2.default)(_typeof(opts.allTemplates) === 'object' && !Array.isArray(opts.allTemplates), '`allTemplates` should be an object');

  var allTemplates = opts.allTemplates;


  return {
    templateNames: function templateNames() {
      return Object.keys(allTemplates).map(function (template) {
        return template;
      }).join(', ');
    },
    render: function render(templateName) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      assertTemplateParams(templateName, props);
      var template = allTemplates[templateName].template;

      var html = renderHtml(template(props));

      return html;
    },
    compile: function compile(templateName) {
      var props = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var dir = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : __dirname;

      assertTemplateParams(templateName, props);
      var _allTemplates$templat = allTemplates[templateName],
          template = _allTemplates$templat.template,
          fileName = _allTemplates$templat.fileName;

      var stream = (0, _fs.createWriteStream)(dir + '/' + fileName + '.html');
      var html = renderHtml(template(props));

      stream.once('open', function () {
        return stream.end(html);
      });
    },
    mailchimp: function mailchimp(config, data) {
      return (0, _mailchimp2.default)(config, data);
    }
  };
};